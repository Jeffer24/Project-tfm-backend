org: jeffer24
#console: true

service: web-proyecto-serverless

frameworkVersion: '3'

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage}
  region: ${opt:region}
  apiGateway:
    request:
      schemas:
        perfil-input-model:
          name: PerfilInputModel
          schema: ${file(infraestructure/handlers/schemas/perfiles-schema.json)}
          description: "Validacion de los datos del perfil"


functions:
  getPerfiles:
    handler: infraestructure/handlers/perfiles-handler.getPerfiles
    events:
      - http:
          path: perfiles
          method: get
  createPerfil:
    handler: infraestructure/handlers/perfiles-handler.createPerfil
    events:
      - http:
          path: perfiles
          method: post
          request:
            schemas:
              application/json: ${file(infraestructure/handlers/schemas/perfiles-schema.json)}

  updatePerfil:
    handler: infraestructure/handlers/perfiles-handler.updatePerfil
    events:
      - http:
          path: perfiles/{id}
          method: put
          request:
            schemas:
              application/json: perfil-input-model
  deletePerfil:
    handler: infraestructure/handlers/perfiles-handler.deletePerfil
    events:
      - http:
          path: perfiles/{id}
          method: delete  
  getDetailPerfil:
    handler: infraestructure/handlers/perfiles-handler.getDetailPerfil
    events:
      - http:
          path: perfiles/{id}
          method: get

#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
